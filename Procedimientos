CREATE DATABASE IF NOT EXISTS Netflix; 
USE Netflix; 

CREATE TABLE IF NOT EXISTS Peliculas( 
id_peli int, 
nombre_peli VARCHAR(30), 
duracion INT, 
director_peli VARCHAR(20), 
género_peli ENUM ('acción', 'drama', 'comedia'), 
nota_peli FLOAT, primary key (id_peli) ); 

INSERT INTO Peliculas (nombre_peli, duracion, director_peli, género_peli, nota_peli, id_peli) 
VALUES ('Bright', 120, 'Fernando', 'acción', 3.1, 1), 
('Frida', 100, 'Daniel', 'drama', 7.6, 10), 
('Los dos papas', 160, 'Adrián', 'comedia', 8.3, 11), 
('Animales nocturnos', 185, 'Tomás', 'drama', 9.5, 100), 
('Oceans Eleven', 150, 'Nuria', 'acción', 3.5, 21), 
('Buscando a Nemo', 120, 'Jon', 'acción', 2.1, 17), 
('El Hoyo', 110, 'Ivan', 'acción', 9.9, 41), 
('Diamante en bruto', 140, 'Paola', 'acción', 7, 101);

/*Ejercicio 1.- Realiza un procedimiento donde se inserte una nueva película a la tabla “Peliculas” 
con los datos expuestos. Una vez hecho esto, haz que en el propio procedimiento se muestre la tabla resultante.
- Nombre película: La historia interminable
- Duración: 110
- Director: Barbara
- Género: acción
- Nota: 8
- Identificador: 3*/

drop procedure ejercicio1;

delimiter //
create procedure ejercicio1()
begin
declare nombre varchar(30);
declare duracion int;
declare director varchar(20);
declare genero varchar(30);
declare nota decimal(2,1);
declare identificador int;

set nombre = "La historia interminable";
set duracion = 110;
set director = "Barbara";
set genero = "accion";
set nota = 8;
set identificador = 3;

INSERT INTO Peliculas (nombre_peli, duracion, director_peli, género_peli, nota_peli, id_peli) 
VALUES (nombre, duracion, director, genero, nota, identificador);
select * from peliculas;
end //

call ejercicio1();

/*Ejercicio 2.- Realiza un procedimiento que modifique la nota de una película. El nombre de la película y 
la nota se insertarán a través del Select. Una vez hecho esto, haz que en el propio procedimiento se muestre la tabla resultante.*/

drop procedure ejercicio2;

delimiter //
create procedure ejercicio2(nombre varchar(20), nota_user decimal(2,1))
begin
update Peliculas set nota_peli=nota_user where nombre_peli=nombre;
select * from Peliculas;
end //

call ejercicio2("Frida", 2.2);

/*Ejercicio 3.- Realiza un procedimiento que añada valores de forma automática a nueva columna llamada 
“Valoraciones” en la tabla películas. La columna Valoraciones podrá tener 3 valores (buena, mala o regular).
- Si la nota de la película es menor que 3.5, la valoración será “mala”
- Si la nota de la película es mayor que 7, la valoración será “buena”
- Si la nota de la película está entre 3.5 y 7 (ambos incluidos), la valoración será “regular”*/

delimiter //
create procedure ejercicio3()
begin

end //

/*Ejercicio 4.- Realiza un procedimiento que modifique el director/directora de una película seleccionada 
por el usuario de la tabla Películas. Una vez hecho esto, haz que en el propio procedimiento se muestre la tabla resultante.
- El usuario insertará el identificador de la pelícila que desea modificar a través del Select
- El usuario insertará el nombre del director a través del select*/

delimiter //
create procedure ejercicio4()
begin

end //



OTRO EJERCICIO CON OTRA BBDD---------------------------------------------------------------------------------



CREATE DATABASE IF NOT EXISTS SkyShowtime;
USE SkyShowtime;

drop database skyshowtime;

CREATE TABLE IF NOT EXISTS Actores(
	id_actor INT,
    nombre VARCHAR(30),
    fecha_nac DATE,
    sueldo INT,
    sexo ENUM ('femenino', 'masculino', 'otros'),
    primary key (id_actor)
);

INSERT INTO Actores(id_actor, nombre, fecha_nac, sueldo, sexo) VALUES
(101, 'Leonarno', '1980/12/01' , 3000000, 'masculino'),
(102, 'Julia', '1997/09/09' , 1000000, 'femenino'),
(103, 'Brad', '1983/02/02' , 700000, 'masculino'),
(104, 'Carlos', '1986/03/03' , 250000, 'masculino'),
(105, 'Santiago', '1970/04/04' , 4000000, 'masculino'),
(106, 'Penelope', '1976/05/05' , 23000, 'femenino'),
(107, 'Noa', '1981/06/06' , 770000, 'otros'),
(108, 'Jon', '1996/07/07' , 6000, 'otros');
drop procedure ejercicio2;
select * from Actores;

/*Ejercicio 1.- Realiza un procedimiento donde se modifiquen los sueldos de todos los actores, asignando el sueldo medio a todos ellos. 
Una vez hecho esto, haz que en el propio procedimiento se muestre la tabla resultante.*/

delimiter //
create procedure ejercicio1()
begin
declare sueldoMedio decimal(20, 2);
select avg(sueldo) into sueldoMedio from Actores;

update Actores set sueldo = sueldoMedio;
select * from Actores;
end //

call ejercicio1();

/*Ejercicio 2.- Realiza un procedimiento que borre los X actores con más sueldo. El número de actores a borrar se insertarán a través del procedimiento. 
Una vez hecho esto, haz que en el propio procedimiento se muestre la tabla resultante.*/
select nombre from Actores order by sueldo desc;
drop procedure ejercicio2;

delimiter //
create procedure ejercicio2(cant int)
begin
declare ActSuelMax int;
declare aux int;
set aux = 0;
set ActSuelMax = (select sueldo from Actores order by sueldo desc limit 1);

while aux <= cant do
delete from Actores where sueldo = ActSuelMax;
set aux = aux +1;
end while;

select * from actores;
end //

call ejercicio2(2);

/*Ejercicio 3.- Realiza un procedimiento que cambie de nombre al tercer actor o actriz más veterano/a de la tabla Actores. 
Una vez hecho esto, haz que en el propio procedimiento se muestre la tabla resultante.
	- El usuario insertará el nombre que desea asignarle al actor/actriz
	- Ten en cuenta que tú no sabes quien es el actor, solo sabes la información que aparece en el enunciado*/
 
drop procedure ejercicio3;

select nombre from actores order by fecha_nac asc limit 2,1;

delimiter //
create procedure ejercicio3(nom varchar(30))
begin
declare actorVet varchar(30);
set actorVet = (select nombre from actores order by fecha_nac asc limit 2,1);

update Actores set nombre = nom where nombre = actorVet;

select * from actores;
end //

call ejercicio3('Paquito');

/*Ejercicio 4.- Realiza un procedimiento que añada caracteres al actor/actriz seleccionado/a. 
Una vez hecho esto, haz que en el propio procedimiento se muestre la tabla resultante.
- El usuario elegirá entre el actor “joven” o “pobre”
- Se añadirá al usuario seleccionado un número X de asteriscos
- El número de asteriscos se calculara con la diferencia de n.º de actores/actrices (total) menos el número de caracteres del actor/actriz seleccionado/a

Ejemplo) Imaginemos que en la tabla hay 15 actores/actrices, y queremos añadir asteriscos al actor que se llama Ramiro. 
N.º total de actores (15)  - n.º de caracteres de Ramiro (6) = 9 asteriscos
	- Nombre antes del programa: Ramiro
	- Nombre después del programa: Ramiro**********/
    
drop procedure ejercicio4;
    
    select count(*) from Actores;
   select char_length(select nombre from Actores order by fecha_nac desc limit 1) from actores;
delimiter //
create procedure ejercicio4(eleccion varchar(10))
begin
declare nom varchar(30);
declare conAst int;
declare conAct int;
declare aux int;
declare asteriscos varchar(30);

set aux = 0;
set asteriscos="";

if eleccion = 'joven' then set nom = (select nombre from Actores order by fecha_nac desc limit 1);
else set nom = (select nombre from Actores order by sueldo asc limit 1);
end if;

set conAct = (select count(*) from Actores);
set conAst = (conAct - char_length(nom));

while aux < conAst do
set asteriscos = CONCAT(asteriscos, '*');
set aux = aux +1;
end while;

update Actores set nombre = concat(nombre, asteriscos) where nombre = nom;

select * from Actores;

end //

call ejercicio4('joven');
